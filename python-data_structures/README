# Python - Data Structures: List, Tuples

## Project Overview
This project focuses on understanding and implementing basic data structures in Python, specifically lists and tuples.
It covers fundamental operations and manipulations that can be performed with these data structures,
enhancing your ability to write efficient and organized code.

## Learning Objectives
At the end of this project, you should be able to explain the following concepts without external references:

- **Lists**: Understand what lists are, their usage, and methods.
- **Strings vs. Lists**: Recognize the differences and similarities between strings and lists.
- **Common List Methods**: Familiarize yourself with the most common list methods and their applications.
- **Stacks and Queues**: Use lists as stacks and queues.
- **List Comprehensions**: Grasp the concept and usage of list comprehensions.
- **Tuples**: Understand what tuples are, their properties, and when to use them over lists.
- **Sequences**: Define what a sequence is in Python.
- **Tuple Packing and Unpacking**: Utilize tuple packing and unpacking techniques.
- **Using the `del` Statement**: Learn how to use the `del` statement effectively.

## Resources
- **Read or Watch**:
  - 3.1.3. Lists
  - Data structures (up to 5.3. Tuples and Sequences)
  - Learn to Program 6: Lists

## Requirements
- **Python Scripts**:
  - Allowed editors: vi, vim, emacs
  - All files must be interpreted/compiled on Ubuntu 20.04 LTS using Python 3 (version 3.8.5)
  - All files should end with a new line
  - The first line of all files should be exactly `#!/usr/bin/python3`
  - A `README.md` file at the root of the project directory is mandatory
  - Your code should adhere to `pycodestyle` (version 2.7.*)
  - All files must be executable
  - The length of your files will be tested using `wc`

## Tasks
1. **Print a list of integers**: Write a function that prints all integers of a list. [File: `0-print_list_integer.py`]
2. **Secure access to an element in a list**: Create a function to retrieve an element from a list. [File: `1-element_at.py`]
3. **Replace element**: Write a function to replace an element of a list at a specific position. [File: `2-replace_in_list.py`]
4. **Print a list of integers... in reverse!**: Print all integers of a list in reverse order. [File: `3-print_reversed_list_integer.py`]
5. **Replace in a copy**: Create a function that replaces an element in a list without modifying the original list. [File: `4-new_in_list.py`]
6. **Can you C me now?**: Write a function that removes all characters 'c' and 'C' from a string. [File: `5-no_c.py`]
7. **Lists of lists = Matrix**: Print a matrix of integers. [File: `6-print_matrix_integer.py`]
8. **Tuples addition**: Write a function that adds two tuples. [File: `7-add_tuple.py`]
9. **More returns!**: Write a function that returns a tuple with the length of a string and its first character. [File: `8-multiple_returns.py`]
10. **Find the max**: Write a function that finds the biggest integer of a list. [File: `9-max_integer.py`]
11. **Only by 2**: Find all multiples of 2 in a list. [File: `10-divisible_by_2.py`]
12. **Delete at**: Write a function that deletes the item at a specific position in a list. [File: `11-delete_at.py`]
13. **Switch**: Complete the source code to switch the values of `a` and `b`. [File: `12-switch.py`]

## Repository
GitHub Repository: [atlas-higher_level_programming](https://github.com/frandyslueue/atlas-higher_level_programming)
